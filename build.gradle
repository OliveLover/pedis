plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.2'
    id 'io.spring.dependency-management' version '1.1.2'
    id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

jacoco {
    toolVersion = "0.8.8"
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot Web Mvc
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // Spring Boot Data JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // Spring Boot Starter Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // Mustache
    implementation 'org.springframework.boot:spring-boot-starter-mustache'

    // Thymeleaf
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // H2 Database
    runtimeOnly 'com.h2database:h2'

    // MariaDB
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

    // SpringSecurity
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'

    // Validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Java Jwt
    implementation 'com.auth0:java-jwt:4.4.0'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
        csv.required = true
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [
                            "**/*Application*"
                    ])
                })
        )
    }

    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            enabled = true

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.00
            }
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.00
            }
            excludes = [
                    "**.*Application*"
            ]
        }
    }
}

//processResources.dependsOn('copySecret')
//
//tasks.register('copySecret', Copy) {
//    copy {
//        from './pedis-submodule-config'
//        include "*.yml"
//        into 'src/main/resources'
//    }
//}